
> typescript-validation-study@1.0.0 inspect
> ts-node inspect-error-objects.ts

********************************* Solution io-ts Validating multiple-failure fleet data *********************************
typeof response = string
response = optional index 0
├─ required property "driver"
│  ├─ required property "name"
│  │  └─ cannot decode "123", should be does not conform to pattern
│  ├─ required property "dob"
│  │  └─ cannot decode "2100-01-01T00:00:00.000Z", should be not old enough
│  ├─ required property "password"
│  │  └─ cannot decode "", should be minimum length 5
│  ├─ optional property "sex"
│  │  ├─ member 0
│  │  │  └─ cannot decode "-", should be "M"
│  │  ├─ member 1
│  │  │  └─ cannot decode "-", should be "F"
│  │  └─ member 2
│  │     └─ cannot decode "-", should be "O"
│  └─ required property "licenseNo"
│     └─ cannot decode "     ", should be does not conform to pattern
└─ required property "vehicle"
   ├─ required property "type"
   │  ├─ member 0
   │  │  └─ cannot decode "none", should be "car"
   │  └─ member 1
   │     └─ cannot decode "none", should be "bus"
   ├─ required property "seats"
   │  └─ cannot decode -5, should be seat must >= 1
   └─ required property "length"
      └─ cannot decode -1, should be length > 0
optional index 1
├─ required property "driver"
│  ├─ required property "name"
│  │  └─ cannot decode "123", should be does not conform to pattern
│  ├─ required property "dob"
│  │  └─ cannot decode "2100-01-01T00:00:00.000Z", should be not old enough
│  ├─ required property "password"
│  │  └─ cannot decode "", should be minimum length 5
│  ├─ optional property "sex"
│  │  ├─ member 0
│  │  │  └─ cannot decode "-", should be "M"
│  │  ├─ member 1
│  │  │  └─ cannot decode "-", should be "F"
│  │  └─ member 2
│  │     └─ cannot decode "-", should be "O"
│  └─ required property "licenseNo"
│     └─ cannot decode "     ", should be does not conform to pattern
└─ required property "vehicle"
   ├─ required property "type"
   │  ├─ member 0
   │  │  └─ cannot decode "none", should be "car"
   │  └─ member 1
   │     └─ cannot decode "none", should be "bus"
   ├─ required property "seats"
   │  └─ cannot decode -5, should be seat must >= 1
   └─ required property "length"
      └─ cannot decode -1, should be length > 0
JSON.stringify(response)="optional index 0\n├─ required property \"driver\"\n│  ├─ required property \"name\"\n│  │  └─ cannot decode \"123\", should be does not conform to pattern\n│  ├─ required property \"dob\"\n│  │  └─ cannot decode \"2100-01-01T00:00:00.000Z\", should be not old enough\n│  ├─ required property \"password\"\n│  │  └─ cannot decode \"\", should be minimum length 5\n│  ├─ optional property \"sex\"\n│  │  ├─ member 0\n│  │  │  └─ cannot decode \"-\", should be \"M\"\n│  │  ├─ member 1\n│  │  │  └─ cannot decode \"-\", should be \"F\"\n│  │  └─ member 2\n│  │     └─ cannot decode \"-\", should be \"O\"\n│  └─ required property \"licenseNo\"\n│     └─ cannot decode \"     \", should be does not conform to pattern\n└─ required property \"vehicle\"\n   ├─ required property \"type\"\n   │  ├─ member 0\n   │  │  └─ cannot decode \"none\", should be \"car\"\n   │  └─ member 1\n   │     └─ cannot decode \"none\", should be \"bus\"\n   ├─ required property \"seats\"\n   │  └─ cannot decode -5, should be seat must >= 1\n   └─ required property \"length\"\n      └─ cannot decode -1, should be length > 0\noptional index 1\n├─ required property \"driver\"\n│  ├─ required property \"name\"\n│  │  └─ cannot decode \"123\", should be does not conform to pattern\n│  ├─ required property \"dob\"\n│  │  └─ cannot decode \"2100-01-01T00:00:00.000Z\", should be not old enough\n│  ├─ required property \"password\"\n│  │  └─ cannot decode \"\", should be minimum length 5\n│  ├─ optional property \"sex\"\n│  │  ├─ member 0\n│  │  │  └─ cannot decode \"-\", should be \"M\"\n│  │  ├─ member 1\n│  │  │  └─ cannot decode \"-\", should be \"F\"\n│  │  └─ member 2\n│  │     └─ cannot decode \"-\", should be \"O\"\n│  └─ required property \"licenseNo\"\n│     └─ cannot decode \"     \", should be does not conform to pattern\n└─ required property \"vehicle\"\n   ├─ required property \"type\"\n   │  ├─ member 0\n   │  │  └─ cannot decode \"none\", should be \"car\"\n   │  └─ member 1\n   │     └─ cannot decode \"none\", should be \"bus\"\n   ├─ required property \"seats\"\n   │  └─ cannot decode -5, should be seat must >= 1\n   └─ required property \"length\"\n      └─ cannot decode -1, should be length > 0"
********************************* Solution joi Validating multiple-failure fleet data *********************************
typeof response = object
response = [object Object]
JSON.stringify(response)={
  "value": [
    {
      "driver": {
        "name": "123",
        "dob": "2100-01-01",
        "sex": "-",
        "password": "",
        "licenseNo": "     "
      },
      "vehicle": {
        "type": "none",
        "seats": -5,
        "length": -1
      }
    },
    {
      "driver": {
        "name": "123",
        "dob": "2100-01-01",
        "sex": "-",
        "password": "",
        "licenseNo": "     "
      },
      "vehicle": {
        "type": "none",
        "seats": -5,
        "length": -1
      }
    }
  ],
  "error": {
    "_original": [
      {
        "driver": {
          "name": "123",
          "dob": "2100-01-01",
          "sex": "-",
          "password": "",
          "licenseNo": "     "
        },
        "vehicle": {
          "type": "none",
          "seats": -5,
          "length": -1
        }
      },
      {
        "driver": {
          "name": "123",
          "dob": "2100-01-01",
          "sex": "-",
          "password": "",
          "licenseNo": "     "
        },
        "vehicle": {
          "type": "none",
          "seats": -5,
          "length": -1
        }
      }
    ],
    "details": [
      {
        "message": "\"[0].driver.name\" with value \"123\" fails to match the required pattern: /[a-z A-Z ]+/",
        "path": [
          0,
          "driver",
          "name"
        ],
        "type": "string.pattern.base",
        "context": {
          "regex": {},
          "value": "123",
          "label": "[0].driver.name",
          "key": "name"
        }
      },
      {
        "message": "\"[0].driver.dob\" must be less than or equal to \"2003-02-21T23:55:28.273Z\"",
        "path": [
          0,
          "driver",
          "dob"
        ],
        "type": "date.max",
        "context": {
          "limit": "2003-02-21T23:55:28.273Z",
          "value": "2100-01-01T00:00:00.000Z",
          "label": "[0].driver.dob",
          "key": "dob"
        }
      },
      {
        "message": "\"[0].driver.sex\" must be one of [M, F, O]",
        "path": [
          0,
          "driver",
          "sex"
        ],
        "type": "any.only",
        "context": {
          "valids": [
            "M",
            "F",
            "O"
          ],
          "label": "[0].driver.sex",
          "value": "-",
          "key": "sex"
        }
      },
      {
        "message": "\"[0].driver.password\" is not allowed to be empty",
        "path": [
          0,
          "driver",
          "password"
        ],
        "type": "string.empty",
        "context": {
          "label": "[0].driver.password",
          "value": "",
          "key": "password"
        }
      },
      {
        "message": "\"[0].driver.licenseNo\" with value \"     \" fails to match the required pattern: /^[a-zA-Z]+$/",
        "path": [
          0,
          "driver",
          "licenseNo"
        ],
        "type": "string.pattern.base",
        "context": {
          "regex": {},
          "value": "     ",
          "label": "[0].driver.licenseNo",
          "key": "licenseNo"
        }
      },
      {
        "message": "\"[0].vehicle.type\" must be one of [car, bus]",
        "path": [
          0,
          "vehicle",
          "type"
        ],
        "type": "any.only",
        "context": {
          "valids": [
            "car",
            "bus"
          ],
          "label": "[0].vehicle.type",
          "value": "none",
          "key": "type"
        }
      },
      {
        "message": "\"[0].vehicle.seats\" must be greater than or equal to 1",
        "path": [
          0,
          "vehicle",
          "seats"
        ],
        "type": "number.min",
        "context": {
          "limit": 1,
          "value": -5,
          "label": "[0].vehicle.seats",
          "key": "seats"
        }
      },
      {
        "message": "\"[0].vehicle.length\" must be a positive number",
        "path": [
          0,
          "vehicle",
          "length"
        ],
        "type": "number.positive",
        "context": {
          "label": "[0].vehicle.length",
          "value": -1,
          "key": "length"
        }
      },
      {
        "message": "\"[1].driver.name\" with value \"123\" fails to match the required pattern: /[a-z A-Z ]+/",
        "path": [
          1,
          "driver",
          "name"
        ],
        "type": "string.pattern.base",
        "context": {
          "regex": {},
          "value": "123",
          "label": "[1].driver.name",
          "key": "name"
        }
      },
      {
        "message": "\"[1].driver.dob\" must be less than or equal to \"2003-02-21T23:55:28.273Z\"",
        "path": [
          1,
          "driver",
          "dob"
        ],
        "type": "date.max",
        "context": {
          "limit": "2003-02-21T23:55:28.273Z",
          "value": "2100-01-01T00:00:00.000Z",
          "label": "[1].driver.dob",
          "key": "dob"
        }
      },
      {
        "message": "\"[1].driver.sex\" must be one of [M, F, O]",
        "path": [
          1,
          "driver",
          "sex"
        ],
        "type": "any.only",
        "context": {
          "valids": [
            "M",
            "F",
            "O"
          ],
          "label": "[1].driver.sex",
          "value": "-",
          "key": "sex"
        }
      },
      {
        "message": "\"[1].driver.password\" is not allowed to be empty",
        "path": [
          1,
          "driver",
          "password"
        ],
        "type": "string.empty",
        "context": {
          "label": "[1].driver.password",
          "value": "",
          "key": "password"
        }
      },
      {
        "message": "\"[1].driver.licenseNo\" with value \"     \" fails to match the required pattern: /^[a-zA-Z]+$/",
        "path": [
          1,
          "driver",
          "licenseNo"
        ],
        "type": "string.pattern.base",
        "context": {
          "regex": {},
          "value": "     ",
          "label": "[1].driver.licenseNo",
          "key": "licenseNo"
        }
      },
      {
        "message": "\"[1].vehicle.type\" must be one of [car, bus]",
        "path": [
          1,
          "vehicle",
          "type"
        ],
        "type": "any.only",
        "context": {
          "valids": [
            "car",
            "bus"
          ],
          "label": "[1].vehicle.type",
          "value": "none",
          "key": "type"
        }
      },
      {
        "message": "\"[1].vehicle.seats\" must be greater than or equal to 1",
        "path": [
          1,
          "vehicle",
          "seats"
        ],
        "type": "number.min",
        "context": {
          "limit": 1,
          "value": -5,
          "label": "[1].vehicle.seats",
          "key": "seats"
        }
      },
      {
        "message": "\"[1].vehicle.length\" must be a positive number",
        "path": [
          1,
          "vehicle",
          "length"
        ],
        "type": "number.positive",
        "context": {
          "label": "[1].vehicle.length",
          "value": -1,
          "key": "length"
        }
      }
    ]
  }
}
********************************* Solution json-schema Validating multiple-failure fleet data *********************************
typeof response = object
response = [object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object]
JSON.stringify(response)=[
  {
    "keyword": "pattern",
    "dataPath": "/0/driver/name",
    "schemaPath": "person.json/properties/name/pattern",
    "params": {
      "pattern": "[a-z A-Z ]+"
    },
    "message": "should match pattern \"[a-z A-Z ]+\""
  },
  {
    "keyword": "olderThanFromNow",
    "dataPath": "/0/driver/dob",
    "schemaPath": "person.json/properties/dob/olderThanFromNow",
    "params": {},
    "message": "should pass \"olderThanFromNow\" keyword validation"
  },
  {
    "keyword": "enum",
    "dataPath": "/0/driver/sex",
    "schemaPath": "person.json/properties/sex/enum",
    "params": {
      "allowedValues": [
        "M",
        "F",
        "O"
      ]
    },
    "message": "should be equal to one of the allowed values"
  },
  {
    "keyword": "minLength",
    "dataPath": "/0/driver/password",
    "schemaPath": "person.json/properties/password/minLength",
    "params": {
      "limit": 5
    },
    "message": "should NOT have fewer than 5 characters"
  },
  {
    "keyword": "pattern",
    "dataPath": "/0/driver/licenseNo",
    "schemaPath": "#/allOf/1/properties/licenseNo/pattern",
    "params": {
      "pattern": "^[a-zA-Z]+$"
    },
    "message": "should match pattern \"^[a-zA-Z]+$\""
  },
  {
    "keyword": "enum",
    "dataPath": "/0/vehicle/type",
    "schemaPath": "vehicle.json/properties/type/enum",
    "params": {
      "allowedValues": [
        "car",
        "bus"
      ]
    },
    "message": "should be equal to one of the allowed values"
  },
  {
    "keyword": "minimum",
    "dataPath": "/0/vehicle/seats",
    "schemaPath": "vehicle.json/properties/seats/minimum",
    "params": {
      "comparison": ">=",
      "limit": 1
    },
    "message": "should be >= 1"
  },
  {
    "keyword": "minimum",
    "dataPath": "/0/vehicle/length",
    "schemaPath": "vehicle.json/properties/length/minimum",
    "params": {
      "comparison": ">=",
      "limit": 0
    },
    "message": "should be >= 0"
  },
  {
    "keyword": "pattern",
    "dataPath": "/1/driver/name",
    "schemaPath": "person.json/properties/name/pattern",
    "params": {
      "pattern": "[a-z A-Z ]+"
    },
    "message": "should match pattern \"[a-z A-Z ]+\""
  },
  {
    "keyword": "olderThanFromNow",
    "dataPath": "/1/driver/dob",
    "schemaPath": "person.json/properties/dob/olderThanFromNow",
    "params": {},
    "message": "should pass \"olderThanFromNow\" keyword validation"
  },
  {
    "keyword": "enum",
    "dataPath": "/1/driver/sex",
    "schemaPath": "person.json/properties/sex/enum",
    "params": {
      "allowedValues": [
        "M",
        "F",
        "O"
      ]
    },
    "message": "should be equal to one of the allowed values"
  },
  {
    "keyword": "minLength",
    "dataPath": "/1/driver/password",
    "schemaPath": "person.json/properties/password/minLength",
    "params": {
      "limit": 5
    },
    "message": "should NOT have fewer than 5 characters"
  },
  {
    "keyword": "pattern",
    "dataPath": "/1/driver/licenseNo",
    "schemaPath": "#/allOf/1/properties/licenseNo/pattern",
    "params": {
      "pattern": "^[a-zA-Z]+$"
    },
    "message": "should match pattern \"^[a-zA-Z]+$\""
  },
  {
    "keyword": "enum",
    "dataPath": "/1/vehicle/type",
    "schemaPath": "vehicle.json/properties/type/enum",
    "params": {
      "allowedValues": [
        "car",
        "bus"
      ]
    },
    "message": "should be equal to one of the allowed values"
  },
  {
    "keyword": "minimum",
    "dataPath": "/1/vehicle/seats",
    "schemaPath": "vehicle.json/properties/seats/minimum",
    "params": {
      "comparison": ">=",
      "limit": 1
    },
    "message": "should be >= 1"
  },
  {
    "keyword": "minimum",
    "dataPath": "/1/vehicle/length",
    "schemaPath": "vehicle.json/properties/length/minimum",
    "params": {
      "comparison": ">=",
      "limit": 0
    },
    "message": "should be >= 0"
  }
]
********************************* Solution yup Validating multiple-failure fleet data *********************************
typeof response = object
response = ValidationError: 18 errors occurred
JSON.stringify(response)={
  "name": "ValidationError",
  "value": [
    {
      "vehicle": {
        "type": "none",
        "seats": -5,
        "length": -1
      },
      "driver": {
        "licenseNo": "     ",
        "password": "",
        "sex": "-",
        "dob": "2099-12-31T13:00:00.000Z",
        "name": "123"
      }
    },
    {
      "vehicle": {
        "type": "none",
        "seats": -5,
        "length": -1
      },
      "driver": {
        "licenseNo": "     ",
        "password": "",
        "sex": "-",
        "dob": "2099-12-31T13:00:00.000Z",
        "name": "123"
      }
    }
  ],
  "errors": [
    "[0].driver.name must match the following: \"/^[a-z A-Z ]+$/\"",
    "[0].driver.dob field must be at earlier than 2003-02-21T23:55:28.715Z",
    "[0].driver.sex must be one of the following values: M, F, O",
    "[0].driver.password is a required field",
    "[0].driver.password must be at least 5 characters",
    "[0].driver.licenseNo must match the following: \"/^[a-zA-Z]+$/\"",
    "[0].vehicle.type must be one of the following values: car, bus",
    "[0].vehicle.seats must be greater than or equal to 1",
    "[0].vehicle.length must be a positive number",
    "[1].driver.name must match the following: \"/^[a-z A-Z ]+$/\"",
    "[1].driver.dob field must be at earlier than 2003-02-21T23:55:28.715Z",
    "[1].driver.sex must be one of the following values: M, F, O",
    "[1].driver.password is a required field",
    "[1].driver.password must be at least 5 characters",
    "[1].driver.licenseNo must match the following: \"/^[a-zA-Z]+$/\"",
    "[1].vehicle.type must be one of the following values: car, bus",
    "[1].vehicle.seats must be greater than or equal to 1",
    "[1].vehicle.length must be a positive number"
  ],
  "inner": [
    {
      "name": "ValidationError",
      "value": "123",
      "path": "[0].driver.name",
      "type": "matches",
      "errors": [
        "[0].driver.name must match the following: \"/^[a-z A-Z ]+$/\""
      ],
      "inner": [],
      "message": "[0].driver.name must match the following: \"/^[a-z A-Z ]+$/\"",
      "params": {
        "value": "123",
        "originalValue": "123",
        "path": "[0].driver.name",
        "regex": {}
      }
    },
    {
      "name": "ValidationError",
      "value": "2099-12-31T13:00:00.000Z",
      "path": "[0].driver.dob",
      "type": "max",
      "errors": [
        "[0].driver.dob field must be at earlier than 2003-02-21T23:55:28.715Z"
      ],
      "inner": [],
      "message": "[0].driver.dob field must be at earlier than 2003-02-21T23:55:28.715Z",
      "params": {
        "value": "2099-12-31T13:00:00.000Z",
        "originalValue": "2100-01-01",
        "path": "[0].driver.dob",
        "max": "2003-02-21T23:55:28.715Z"
      }
    },
    {
      "name": "ValidationError",
      "value": "-",
      "path": "[0].driver.sex",
      "type": "oneOf",
      "errors": [
        "[0].driver.sex must be one of the following values: M, F, O"
      ],
      "inner": [],
      "message": "[0].driver.sex must be one of the following values: M, F, O",
      "params": {
        "value": "-",
        "originalValue": "-",
        "path": "[0].driver.sex",
        "values": "M, F, O"
      }
    },
    {
      "name": "ValidationError",
      "value": "",
      "path": "[0].driver.password",
      "type": "required",
      "errors": [
        "[0].driver.password is a required field"
      ],
      "inner": [],
      "message": "[0].driver.password is a required field",
      "params": {
        "value": "",
        "originalValue": "",
        "path": "[0].driver.password"
      }
    },
    {
      "name": "ValidationError",
      "value": "",
      "path": "[0].driver.password",
      "type": "min",
      "errors": [
        "[0].driver.password must be at least 5 characters"
      ],
      "inner": [],
      "message": "[0].driver.password must be at least 5 characters",
      "params": {
        "value": "",
        "originalValue": "",
        "path": "[0].driver.password",
        "min": 5
      }
    },
    {
      "name": "ValidationError",
      "value": "     ",
      "path": "[0].driver.licenseNo",
      "type": "matches",
      "errors": [
        "[0].driver.licenseNo must match the following: \"/^[a-zA-Z]+$/\""
      ],
      "inner": [],
      "message": "[0].driver.licenseNo must match the following: \"/^[a-zA-Z]+$/\"",
      "params": {
        "value": "     ",
        "originalValue": "     ",
        "path": "[0].driver.licenseNo",
        "regex": {}
      }
    },
    {
      "name": "ValidationError",
      "value": "none",
      "path": "[0].vehicle.type",
      "type": "oneOf",
      "errors": [
        "[0].vehicle.type must be one of the following values: car, bus"
      ],
      "inner": [],
      "message": "[0].vehicle.type must be one of the following values: car, bus",
      "params": {
        "value": "none",
        "originalValue": "none",
        "path": "[0].vehicle.type",
        "values": "car, bus"
      }
    },
    {
      "name": "ValidationError",
      "value": -5,
      "path": "[0].vehicle.seats",
      "type": "min",
      "errors": [
        "[0].vehicle.seats must be greater than or equal to 1"
      ],
      "inner": [],
      "message": "[0].vehicle.seats must be greater than or equal to 1",
      "params": {
        "value": -5,
        "originalValue": -5,
        "path": "[0].vehicle.seats",
        "min": 1
      }
    },
    {
      "name": "ValidationError",
      "value": -1,
      "path": "[0].vehicle.length",
      "type": "min",
      "errors": [
        "[0].vehicle.length must be a positive number"
      ],
      "inner": [],
      "message": "[0].vehicle.length must be a positive number",
      "params": {
        "value": -1,
        "originalValue": -1,
        "path": "[0].vehicle.length",
        "more": 0
      }
    },
    {
      "name": "ValidationError",
      "value": "123",
      "path": "[1].driver.name",
      "type": "matches",
      "errors": [
        "[1].driver.name must match the following: \"/^[a-z A-Z ]+$/\""
      ],
      "inner": [],
      "message": "[1].driver.name must match the following: \"/^[a-z A-Z ]+$/\"",
      "params": {
        "value": "123",
        "originalValue": "123",
        "path": "[1].driver.name",
        "regex": {}
      }
    },
    {
      "name": "ValidationError",
      "value": "2099-12-31T13:00:00.000Z",
      "path": "[1].driver.dob",
      "type": "max",
      "errors": [
        "[1].driver.dob field must be at earlier than 2003-02-21T23:55:28.715Z"
      ],
      "inner": [],
      "message": "[1].driver.dob field must be at earlier than 2003-02-21T23:55:28.715Z",
      "params": {
        "value": "2099-12-31T13:00:00.000Z",
        "originalValue": "2100-01-01",
        "path": "[1].driver.dob",
        "max": "2003-02-21T23:55:28.715Z"
      }
    },
    {
      "name": "ValidationError",
      "value": "-",
      "path": "[1].driver.sex",
      "type": "oneOf",
      "errors": [
        "[1].driver.sex must be one of the following values: M, F, O"
      ],
      "inner": [],
      "message": "[1].driver.sex must be one of the following values: M, F, O",
      "params": {
        "value": "-",
        "originalValue": "-",
        "path": "[1].driver.sex",
        "values": "M, F, O"
      }
    },
    {
      "name": "ValidationError",
      "value": "",
      "path": "[1].driver.password",
      "type": "required",
      "errors": [
        "[1].driver.password is a required field"
      ],
      "inner": [],
      "message": "[1].driver.password is a required field",
      "params": {
        "value": "",
        "originalValue": "",
        "path": "[1].driver.password"
      }
    },
    {
      "name": "ValidationError",
      "value": "",
      "path": "[1].driver.password",
      "type": "min",
      "errors": [
        "[1].driver.password must be at least 5 characters"
      ],
      "inner": [],
      "message": "[1].driver.password must be at least 5 characters",
      "params": {
        "value": "",
        "originalValue": "",
        "path": "[1].driver.password",
        "min": 5
      }
    },
    {
      "name": "ValidationError",
      "value": "     ",
      "path": "[1].driver.licenseNo",
      "type": "matches",
      "errors": [
        "[1].driver.licenseNo must match the following: \"/^[a-zA-Z]+$/\""
      ],
      "inner": [],
      "message": "[1].driver.licenseNo must match the following: \"/^[a-zA-Z]+$/\"",
      "params": {
        "value": "     ",
        "originalValue": "     ",
        "path": "[1].driver.licenseNo",
        "regex": {}
      }
    },
    {
      "name": "ValidationError",
      "value": "none",
      "path": "[1].vehicle.type",
      "type": "oneOf",
      "errors": [
        "[1].vehicle.type must be one of the following values: car, bus"
      ],
      "inner": [],
      "message": "[1].vehicle.type must be one of the following values: car, bus",
      "params": {
        "value": "none",
        "originalValue": "none",
        "path": "[1].vehicle.type",
        "values": "car, bus"
      }
    },
    {
      "name": "ValidationError",
      "value": -5,
      "path": "[1].vehicle.seats",
      "type": "min",
      "errors": [
        "[1].vehicle.seats must be greater than or equal to 1"
      ],
      "inner": [],
      "message": "[1].vehicle.seats must be greater than or equal to 1",
      "params": {
        "value": -5,
        "originalValue": -5,
        "path": "[1].vehicle.seats",
        "min": 1
      }
    },
    {
      "name": "ValidationError",
      "value": -1,
      "path": "[1].vehicle.length",
      "type": "min",
      "errors": [
        "[1].vehicle.length must be a positive number"
      ],
      "inner": [],
      "message": "[1].vehicle.length must be a positive number",
      "params": {
        "value": -1,
        "originalValue": -1,
        "path": "[1].vehicle.length",
        "more": 0
      }
    }
  ],
  "message": "18 errors occurred"
}
********************************* Solution zod Validating multiple-failure fleet data *********************************
typeof response = object
response = Error: 16 validation issue(s)

  Issue #0: invalid_string at 0.driver.name
  Invalid

  Issue #1: custom_error at 0.driver.dob
  Invalid value.

  Issue #2: invalid_enum_value at 0.driver.sex
  Input must be one of these values: M, F, O

  Issue #3: too_small at 0.driver.password
  Should be at least 5 characters

  Issue #4: invalid_string at 0.driver.licenseNo
  Invalid

  Issue #5: invalid_enum_value at 0.vehicle.type
  Input must be one of these values: car, bus

  Issue #6: too_small at 0.vehicle.seats
  Value should be greater than or equal to 1

  Issue #7: too_small at 0.vehicle.length
  Value should be greater than 0

  Issue #8: invalid_string at 1.driver.name
  Invalid

  Issue #9: custom_error at 1.driver.dob
  Invalid value.

  Issue #10: invalid_enum_value at 1.driver.sex
  Input must be one of these values: M, F, O

  Issue #11: too_small at 1.driver.password
  Should be at least 5 characters

  Issue #12: invalid_string at 1.driver.licenseNo
  Invalid

  Issue #13: invalid_enum_value at 1.vehicle.type
  Input must be one of these values: car, bus

  Issue #14: too_small at 1.vehicle.seats
  Value should be greater than or equal to 1

  Issue #15: too_small at 1.vehicle.length
  Value should be greater than 0

JSON.stringify(response)={
  "errors": [
    {
      "validation": "regex",
      "code": "invalid_string",
      "path": [
        0,
        "driver",
        "name"
      ],
      "message": "Invalid"
    },
    {
      "code": "custom_error",
      "message": "Invalid value.",
      "path": [
        0,
        "driver",
        "dob"
      ]
    },
    {
      "code": "invalid_enum_value",
      "options": [
        "M",
        "F",
        "O"
      ],
      "path": [
        0,
        "driver",
        "sex"
      ],
      "message": "Input must be one of these values: M, F, O"
    },
    {
      "code": "too_small",
      "minimum": 5,
      "type": "string",
      "inclusive": true,
      "path": [
        0,
        "driver",
        "password"
      ],
      "message": "Should be at least 5 characters"
    },
    {
      "validation": "regex",
      "code": "invalid_string",
      "path": [
        0,
        "driver",
        "licenseNo"
      ],
      "message": "Invalid"
    },
    {
      "code": "invalid_enum_value",
      "options": [
        "car",
        "bus"
      ],
      "path": [
        0,
        "vehicle",
        "type"
      ],
      "message": "Input must be one of these values: car, bus"
    },
    {
      "code": "too_small",
      "minimum": 1,
      "type": "number",
      "inclusive": true,
      "path": [
        0,
        "vehicle",
        "seats"
      ],
      "message": "Value should be greater than or equal to 1"
    },
    {
      "code": "too_small",
      "minimum": 0,
      "type": "number",
      "inclusive": false,
      "path": [
        0,
        "vehicle",
        "length"
      ],
      "message": "Value should be greater than 0"
    },
    {
      "validation": "regex",
      "code": "invalid_string",
      "path": [
        1,
        "driver",
        "name"
      ],
      "message": "Invalid"
    },
    {
      "code": "custom_error",
      "message": "Invalid value.",
      "path": [
        1,
        "driver",
        "dob"
      ]
    },
    {
      "code": "invalid_enum_value",
      "options": [
        "M",
        "F",
        "O"
      ],
      "path": [
        1,
        "driver",
        "sex"
      ],
      "message": "Input must be one of these values: M, F, O"
    },
    {
      "code": "too_small",
      "minimum": 5,
      "type": "string",
      "inclusive": true,
      "path": [
        1,
        "driver",
        "password"
      ],
      "message": "Should be at least 5 characters"
    },
    {
      "validation": "regex",
      "code": "invalid_string",
      "path": [
        1,
        "driver",
        "licenseNo"
      ],
      "message": "Invalid"
    },
    {
      "code": "invalid_enum_value",
      "options": [
        "car",
        "bus"
      ],
      "path": [
        1,
        "vehicle",
        "type"
      ],
      "message": "Input must be one of these values: car, bus"
    },
    {
      "code": "too_small",
      "minimum": 1,
      "type": "number",
      "inclusive": true,
      "path": [
        1,
        "vehicle",
        "seats"
      ],
      "message": "Value should be greater than or equal to 1"
    },
    {
      "code": "too_small",
      "minimum": 0,
      "type": "number",
      "inclusive": false,
      "path": [
        1,
        "vehicle",
        "length"
      ],
      "message": "Value should be greater than 0"
    }
  ]
}
********************************* Solution superstruct Validating multiple-failure fleet data *********************************
typeof response = object
response = [object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object]
JSON.stringify(response)=[
  {
    "value": "123",
    "type": "string",
    "refinement": "pattern",
    "key": "name",
    "path": [
      0,
      "driver",
      "name"
    ],
    "branch": [
      [
        {
          "driver": {
            "name": "123",
            "dob": "2100-01-01",
            "sex": "-",
            "password": "",
            "licenseNo": "     "
          },
          "vehicle": {
            "type": "none",
            "seats": -5,
            "length": -1
          }
        },
        {
          "driver": {
            "name": "123",
            "dob": "2100-01-01",
            "sex": "-",
            "password": "",
            "licenseNo": "     "
          },
          "vehicle": {
            "type": "none",
            "seats": -5,
            "length": -1
          }
        }
      ],
      {
        "driver": {
          "name": "123",
          "dob": "2100-01-01",
          "sex": "-",
          "password": "",
          "licenseNo": "     "
        },
        "vehicle": {
          "type": "none",
          "seats": -5,
          "length": -1
        }
      },
      {
        "name": "123",
        "dob": "2100-01-01",
        "sex": "-",
        "password": "",
        "licenseNo": "     "
      },
      "123"
    ],
    "message": "Expected a string matching `/^[a-z A-Z ]+$/` but received \"123\""
  },
  {
    "value": "2100-01-01",
    "type": "string",
    "refinement": "dob18years",
    "key": "dob",
    "path": [
      0,
      "driver",
      "dob"
    ],
    "branch": [
      [
        {
          "driver": {
            "name": "123",
            "dob": "2100-01-01",
            "sex": "-",
            "password": "",
            "licenseNo": "     "
          },
          "vehicle": {
            "type": "none",
            "seats": -5,
            "length": -1
          }
        },
        {
          "driver": {
            "name": "123",
            "dob": "2100-01-01",
            "sex": "-",
            "password": "",
            "licenseNo": "     "
          },
          "vehicle": {
            "type": "none",
            "seats": -5,
            "length": -1
          }
        }
      ],
      {
        "driver": {
          "name": "123",
          "dob": "2100-01-01",
          "sex": "-",
          "password": "",
          "licenseNo": "     "
        },
        "vehicle": {
          "type": "none",
          "seats": -5,
          "length": -1
        }
      },
      {
        "name": "123",
        "dob": "2100-01-01",
        "sex": "-",
        "password": "",
        "licenseNo": "     "
      },
      "2100-01-01"
    ],
    "message": "Expected a value of type `string`, but received: `\"2100-01-01\"`"
  },
  {
    "value": "-",
    "type": "enums",
    "key": "sex",
    "path": [
      0,
      "driver",
      "sex"
    ],
    "branch": [
      [
        {
          "driver": {
            "name": "123",
            "dob": "2100-01-01",
            "sex": "-",
            "password": "",
            "licenseNo": "     "
          },
          "vehicle": {
            "type": "none",
            "seats": -5,
            "length": -1
          }
        },
        {
          "driver": {
            "name": "123",
            "dob": "2100-01-01",
            "sex": "-",
            "password": "",
            "licenseNo": "     "
          },
          "vehicle": {
            "type": "none",
            "seats": -5,
            "length": -1
          }
        }
      ],
      {
        "driver": {
          "name": "123",
          "dob": "2100-01-01",
          "sex": "-",
          "password": "",
          "licenseNo": "     "
        },
        "vehicle": {
          "type": "none",
          "seats": -5,
          "length": -1
        }
      },
      {
        "name": "123",
        "dob": "2100-01-01",
        "sex": "-",
        "password": "",
        "licenseNo": "     "
      },
      "-"
    ],
    "message": "Expected one of `\"M\",\"F\",\"O\"`, but received: \"-\""
  },
  {
    "value": "",
    "type": "string",
    "refinement": "size",
    "key": "password",
    "path": [
      0,
      "driver",
      "password"
    ],
    "branch": [
      [
        {
          "driver": {
            "name": "123",
            "dob": "2100-01-01",
            "sex": "-",
            "password": "",
            "licenseNo": "     "
          },
          "vehicle": {
            "type": "none",
            "seats": -5,
            "length": -1
          }
        },
        {
          "driver": {
            "name": "123",
            "dob": "2100-01-01",
            "sex": "-",
            "password": "",
            "licenseNo": "     "
          },
          "vehicle": {
            "type": "none",
            "seats": -5,
            "length": -1
          }
        }
      ],
      {
        "driver": {
          "name": "123",
          "dob": "2100-01-01",
          "sex": "-",
          "password": "",
          "licenseNo": "     "
        },
        "vehicle": {
          "type": "none",
          "seats": -5,
          "length": -1
        }
      },
      {
        "name": "123",
        "dob": "2100-01-01",
        "sex": "-",
        "password": "",
        "licenseNo": "     "
      },
      ""
    ],
    "message": "Expected a string with a length of `5` but received one with a length of `0`"
  },
  {
    "value": "     ",
    "type": "string",
    "refinement": "pattern",
    "key": "licenseNo",
    "path": [
      0,
      "driver",
      "licenseNo"
    ],
    "branch": [
      [
        {
          "driver": {
            "name": "123",
            "dob": "2100-01-01",
            "sex": "-",
            "password": "",
            "licenseNo": "     "
          },
          "vehicle": {
            "type": "none",
            "seats": -5,
            "length": -1
          }
        },
        {
          "driver": {
            "name": "123",
            "dob": "2100-01-01",
            "sex": "-",
            "password": "",
            "licenseNo": "     "
          },
          "vehicle": {
            "type": "none",
            "seats": -5,
            "length": -1
          }
        }
      ],
      {
        "driver": {
          "name": "123",
          "dob": "2100-01-01",
          "sex": "-",
          "password": "",
          "licenseNo": "     "
        },
        "vehicle": {
          "type": "none",
          "seats": -5,
          "length": -1
        }
      },
      {
        "name": "123",
        "dob": "2100-01-01",
        "sex": "-",
        "password": "",
        "licenseNo": "     "
      },
      "     "
    ],
    "message": "Expected a string matching `/^[a-zA-Z]+$/` but received \"     \""
  },
  {
    "value": "none",
    "type": "enums",
    "key": "type",
    "path": [
      0,
      "vehicle",
      "type"
    ],
    "branch": [
      [
        {
          "driver": {
            "name": "123",
            "dob": "2100-01-01",
            "sex": "-",
            "password": "",
            "licenseNo": "     "
          },
          "vehicle": {
            "type": "none",
            "seats": -5,
            "length": -1
          }
        },
        {
          "driver": {
            "name": "123",
            "dob": "2100-01-01",
            "sex": "-",
            "password": "",
            "licenseNo": "     "
          },
          "vehicle": {
            "type": "none",
            "seats": -5,
            "length": -1
          }
        }
      ],
      {
        "driver": {
          "name": "123",
          "dob": "2100-01-01",
          "sex": "-",
          "password": "",
          "licenseNo": "     "
        },
        "vehicle": {
          "type": "none",
          "seats": -5,
          "length": -1
        }
      },
      {
        "type": "none",
        "seats": -5,
        "length": -1
      },
      "none"
    ],
    "message": "Expected one of `\"car\",\"bus\"`, but received: \"none\""
  },
  {
    "value": -5,
    "type": "integer",
    "refinement": "min",
    "key": "seats",
    "path": [
      0,
      "vehicle",
      "seats"
    ],
    "branch": [
      [
        {
          "driver": {
            "name": "123",
            "dob": "2100-01-01",
            "sex": "-",
            "password": "",
            "licenseNo": "     "
          },
          "vehicle": {
            "type": "none",
            "seats": -5,
            "length": -1
          }
        },
        {
          "driver": {
            "name": "123",
            "dob": "2100-01-01",
            "sex": "-",
            "password": "",
            "licenseNo": "     "
          },
          "vehicle": {
            "type": "none",
            "seats": -5,
            "length": -1
          }
        }
      ],
      {
        "driver": {
          "name": "123",
          "dob": "2100-01-01",
          "sex": "-",
          "password": "",
          "licenseNo": "     "
        },
        "vehicle": {
          "type": "none",
          "seats": -5,
          "length": -1
        }
      },
      {
        "type": "none",
        "seats": -5,
        "length": -1
      },
      -5
    ],
    "message": "Expected a integer greater than or equal to 1 but received `-5`"
  },
  {
    "value": -1,
    "type": "number",
    "refinement": "min",
    "key": "length",
    "path": [
      0,
      "vehicle",
      "length"
    ],
    "branch": [
      [
        {
          "driver": {
            "name": "123",
            "dob": "2100-01-01",
            "sex": "-",
            "password": "",
            "licenseNo": "     "
          },
          "vehicle": {
            "type": "none",
            "seats": -5,
            "length": -1
          }
        },
        {
          "driver": {
            "name": "123",
            "dob": "2100-01-01",
            "sex": "-",
            "password": "",
            "licenseNo": "     "
          },
          "vehicle": {
            "type": "none",
            "seats": -5,
            "length": -1
          }
        }
      ],
      {
        "driver": {
          "name": "123",
          "dob": "2100-01-01",
          "sex": "-",
          "password": "",
          "licenseNo": "     "
        },
        "vehicle": {
          "type": "none",
          "seats": -5,
          "length": -1
        }
      },
      {
        "type": "none",
        "seats": -5,
        "length": -1
      },
      -1
    ],
    "message": "Expected a value of type `number`, but received: `-1`"
  },
  {
    "value": "123",
    "type": "string",
    "refinement": "pattern",
    "key": "name",
    "path": [
      1,
      "driver",
      "name"
    ],
    "branch": [
      [
        {
          "driver": {
            "name": "123",
            "dob": "2100-01-01",
            "sex": "-",
            "password": "",
            "licenseNo": "     "
          },
          "vehicle": {
            "type": "none",
            "seats": -5,
            "length": -1
          }
        },
        {
          "driver": {
            "name": "123",
            "dob": "2100-01-01",
            "sex": "-",
            "password": "",
            "licenseNo": "     "
          },
          "vehicle": {
            "type": "none",
            "seats": -5,
            "length": -1
          }
        }
      ],
      {
        "driver": {
          "name": "123",
          "dob": "2100-01-01",
          "sex": "-",
          "password": "",
          "licenseNo": "     "
        },
        "vehicle": {
          "type": "none",
          "seats": -5,
          "length": -1
        }
      },
      {
        "name": "123",
        "dob": "2100-01-01",
        "sex": "-",
        "password": "",
        "licenseNo": "     "
      },
      "123"
    ],
    "message": "Expected a string matching `/^[a-z A-Z ]+$/` but received \"123\""
  },
  {
    "value": "2100-01-01",
    "type": "string",
    "refinement": "dob18years",
    "key": "dob",
    "path": [
      1,
      "driver",
      "dob"
    ],
    "branch": [
      [
        {
          "driver": {
            "name": "123",
            "dob": "2100-01-01",
            "sex": "-",
            "password": "",
            "licenseNo": "     "
          },
          "vehicle": {
            "type": "none",
            "seats": -5,
            "length": -1
          }
        },
        {
          "driver": {
            "name": "123",
            "dob": "2100-01-01",
            "sex": "-",
            "password": "",
            "licenseNo": "     "
          },
          "vehicle": {
            "type": "none",
            "seats": -5,
            "length": -1
          }
        }
      ],
      {
        "driver": {
          "name": "123",
          "dob": "2100-01-01",
          "sex": "-",
          "password": "",
          "licenseNo": "     "
        },
        "vehicle": {
          "type": "none",
          "seats": -5,
          "length": -1
        }
      },
      {
        "name": "123",
        "dob": "2100-01-01",
        "sex": "-",
        "password": "",
        "licenseNo": "     "
      },
      "2100-01-01"
    ],
    "message": "Expected a value of type `string`, but received: `\"2100-01-01\"`"
  },
  {
    "value": "-",
    "type": "enums",
    "key": "sex",
    "path": [
      1,
      "driver",
      "sex"
    ],
    "branch": [
      [
        {
          "driver": {
            "name": "123",
            "dob": "2100-01-01",
            "sex": "-",
            "password": "",
            "licenseNo": "     "
          },
          "vehicle": {
            "type": "none",
            "seats": -5,
            "length": -1
          }
        },
        {
          "driver": {
            "name": "123",
            "dob": "2100-01-01",
            "sex": "-",
            "password": "",
            "licenseNo": "     "
          },
          "vehicle": {
            "type": "none",
            "seats": -5,
            "length": -1
          }
        }
      ],
      {
        "driver": {
          "name": "123",
          "dob": "2100-01-01",
          "sex": "-",
          "password": "",
          "licenseNo": "     "
        },
        "vehicle": {
          "type": "none",
          "seats": -5,
          "length": -1
        }
      },
      {
        "name": "123",
        "dob": "2100-01-01",
        "sex": "-",
        "password": "",
        "licenseNo": "     "
      },
      "-"
    ],
    "message": "Expected one of `\"M\",\"F\",\"O\"`, but received: \"-\""
  },
  {
    "value": "",
    "type": "string",
    "refinement": "size",
    "key": "password",
    "path": [
      1,
      "driver",
      "password"
    ],
    "branch": [
      [
        {
          "driver": {
            "name": "123",
            "dob": "2100-01-01",
            "sex": "-",
            "password": "",
            "licenseNo": "     "
          },
          "vehicle": {
            "type": "none",
            "seats": -5,
            "length": -1
          }
        },
        {
          "driver": {
            "name": "123",
            "dob": "2100-01-01",
            "sex": "-",
            "password": "",
            "licenseNo": "     "
          },
          "vehicle": {
            "type": "none",
            "seats": -5,
            "length": -1
          }
        }
      ],
      {
        "driver": {
          "name": "123",
          "dob": "2100-01-01",
          "sex": "-",
          "password": "",
          "licenseNo": "     "
        },
        "vehicle": {
          "type": "none",
          "seats": -5,
          "length": -1
        }
      },
      {
        "name": "123",
        "dob": "2100-01-01",
        "sex": "-",
        "password": "",
        "licenseNo": "     "
      },
      ""
    ],
    "message": "Expected a string with a length of `5` but received one with a length of `0`"
  },
  {
    "value": "     ",
    "type": "string",
    "refinement": "pattern",
    "key": "licenseNo",
    "path": [
      1,
      "driver",
      "licenseNo"
    ],
    "branch": [
      [
        {
          "driver": {
            "name": "123",
            "dob": "2100-01-01",
            "sex": "-",
            "password": "",
            "licenseNo": "     "
          },
          "vehicle": {
            "type": "none",
            "seats": -5,
            "length": -1
          }
        },
        {
          "driver": {
            "name": "123",
            "dob": "2100-01-01",
            "sex": "-",
            "password": "",
            "licenseNo": "     "
          },
          "vehicle": {
            "type": "none",
            "seats": -5,
            "length": -1
          }
        }
      ],
      {
        "driver": {
          "name": "123",
          "dob": "2100-01-01",
          "sex": "-",
          "password": "",
          "licenseNo": "     "
        },
        "vehicle": {
          "type": "none",
          "seats": -5,
          "length": -1
        }
      },
      {
        "name": "123",
        "dob": "2100-01-01",
        "sex": "-",
        "password": "",
        "licenseNo": "     "
      },
      "     "
    ],
    "message": "Expected a string matching `/^[a-zA-Z]+$/` but received \"     \""
  },
  {
    "value": "none",
    "type": "enums",
    "key": "type",
    "path": [
      1,
      "vehicle",
      "type"
    ],
    "branch": [
      [
        {
          "driver": {
            "name": "123",
            "dob": "2100-01-01",
            "sex": "-",
            "password": "",
            "licenseNo": "     "
          },
          "vehicle": {
            "type": "none",
            "seats": -5,
            "length": -1
          }
        },
        {
          "driver": {
            "name": "123",
            "dob": "2100-01-01",
            "sex": "-",
            "password": "",
            "licenseNo": "     "
          },
          "vehicle": {
            "type": "none",
            "seats": -5,
            "length": -1
          }
        }
      ],
      {
        "driver": {
          "name": "123",
          "dob": "2100-01-01",
          "sex": "-",
          "password": "",
          "licenseNo": "     "
        },
        "vehicle": {
          "type": "none",
          "seats": -5,
          "length": -1
        }
      },
      {
        "type": "none",
        "seats": -5,
        "length": -1
      },
      "none"
    ],
    "message": "Expected one of `\"car\",\"bus\"`, but received: \"none\""
  },
  {
    "value": -5,
    "type": "integer",
    "refinement": "min",
    "key": "seats",
    "path": [
      1,
      "vehicle",
      "seats"
    ],
    "branch": [
      [
        {
          "driver": {
            "name": "123",
            "dob": "2100-01-01",
            "sex": "-",
            "password": "",
            "licenseNo": "     "
          },
          "vehicle": {
            "type": "none",
            "seats": -5,
            "length": -1
          }
        },
        {
          "driver": {
            "name": "123",
            "dob": "2100-01-01",
            "sex": "-",
            "password": "",
            "licenseNo": "     "
          },
          "vehicle": {
            "type": "none",
            "seats": -5,
            "length": -1
          }
        }
      ],
      {
        "driver": {
          "name": "123",
          "dob": "2100-01-01",
          "sex": "-",
          "password": "",
          "licenseNo": "     "
        },
        "vehicle": {
          "type": "none",
          "seats": -5,
          "length": -1
        }
      },
      {
        "type": "none",
        "seats": -5,
        "length": -1
      },
      -5
    ],
    "message": "Expected a integer greater than or equal to 1 but received `-5`"
  },
  {
    "value": -1,
    "type": "number",
    "refinement": "min",
    "key": "length",
    "path": [
      1,
      "vehicle",
      "length"
    ],
    "branch": [
      [
        {
          "driver": {
            "name": "123",
            "dob": "2100-01-01",
            "sex": "-",
            "password": "",
            "licenseNo": "     "
          },
          "vehicle": {
            "type": "none",
            "seats": -5,
            "length": -1
          }
        },
        {
          "driver": {
            "name": "123",
            "dob": "2100-01-01",
            "sex": "-",
            "password": "",
            "licenseNo": "     "
          },
          "vehicle": {
            "type": "none",
            "seats": -5,
            "length": -1
          }
        }
      ],
      {
        "driver": {
          "name": "123",
          "dob": "2100-01-01",
          "sex": "-",
          "password": "",
          "licenseNo": "     "
        },
        "vehicle": {
          "type": "none",
          "seats": -5,
          "length": -1
        }
      },
      {
        "type": "none",
        "seats": -5,
        "length": -1
      },
      -1
    ],
    "message": "Expected a value of type `number`, but received: `-1`"
  }
]
********************************* Solution ajv-standalone Validating multiple-failure fleet data *********************************
typeof response = object
response = [object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object]
JSON.stringify(response)=[
  {
    "keyword": "pattern",
    "dataPath": "/0/driver/name",
    "schemaPath": "person.json/properties/name/pattern",
    "params": {
      "pattern": "[a-z A-Z ]+"
    },
    "message": "should match pattern \"[a-z A-Z ]+\""
  },
  {
    "keyword": "olderThanFromNow",
    "dataPath": "/0/driver/dob",
    "schemaPath": "person.json/properties/dob/olderThanFromNow",
    "params": {},
    "message": "should pass \"olderThanFromNow\" keyword validation"
  },
  {
    "keyword": "enum",
    "dataPath": "/0/driver/sex",
    "schemaPath": "person.json/properties/sex/enum",
    "params": {
      "allowedValues": [
        "M",
        "F",
        "O"
      ]
    },
    "message": "should be equal to one of the allowed values"
  },
  {
    "keyword": "minLength",
    "dataPath": "/0/driver/password",
    "schemaPath": "person.json/properties/password/minLength",
    "params": {
      "limit": 5
    },
    "message": "should NOT have fewer than 5 characters"
  },
  {
    "keyword": "pattern",
    "dataPath": "/0/driver/licenseNo",
    "schemaPath": "#/allOf/1/properties/licenseNo/pattern",
    "params": {
      "pattern": "^[a-zA-Z]+$"
    },
    "message": "should match pattern \"^[a-zA-Z]+$\""
  },
  {
    "keyword": "enum",
    "dataPath": "/0/vehicle/type",
    "schemaPath": "vehicle.json/properties/type/enum",
    "params": {
      "allowedValues": [
        "car",
        "bus"
      ]
    },
    "message": "should be equal to one of the allowed values"
  },
  {
    "keyword": "minimum",
    "dataPath": "/0/vehicle/seats",
    "schemaPath": "vehicle.json/properties/seats/minimum",
    "params": {
      "comparison": ">=",
      "limit": 1
    },
    "message": "should be >= 1"
  },
  {
    "keyword": "minimum",
    "dataPath": "/0/vehicle/length",
    "schemaPath": "vehicle.json/properties/length/minimum",
    "params": {
      "comparison": ">=",
      "limit": 0
    },
    "message": "should be >= 0"
  },
  {
    "keyword": "pattern",
    "dataPath": "/1/driver/name",
    "schemaPath": "person.json/properties/name/pattern",
    "params": {
      "pattern": "[a-z A-Z ]+"
    },
    "message": "should match pattern \"[a-z A-Z ]+\""
  },
  {
    "keyword": "olderThanFromNow",
    "dataPath": "/1/driver/dob",
    "schemaPath": "person.json/properties/dob/olderThanFromNow",
    "params": {},
    "message": "should pass \"olderThanFromNow\" keyword validation"
  },
  {
    "keyword": "enum",
    "dataPath": "/1/driver/sex",
    "schemaPath": "person.json/properties/sex/enum",
    "params": {
      "allowedValues": [
        "M",
        "F",
        "O"
      ]
    },
    "message": "should be equal to one of the allowed values"
  },
  {
    "keyword": "minLength",
    "dataPath": "/1/driver/password",
    "schemaPath": "person.json/properties/password/minLength",
    "params": {
      "limit": 5
    },
    "message": "should NOT have fewer than 5 characters"
  },
  {
    "keyword": "pattern",
    "dataPath": "/1/driver/licenseNo",
    "schemaPath": "#/allOf/1/properties/licenseNo/pattern",
    "params": {
      "pattern": "^[a-zA-Z]+$"
    },
    "message": "should match pattern \"^[a-zA-Z]+$\""
  },
  {
    "keyword": "enum",
    "dataPath": "/1/vehicle/type",
    "schemaPath": "vehicle.json/properties/type/enum",
    "params": {
      "allowedValues": [
        "car",
        "bus"
      ]
    },
    "message": "should be equal to one of the allowed values"
  },
  {
    "keyword": "minimum",
    "dataPath": "/1/vehicle/seats",
    "schemaPath": "vehicle.json/properties/seats/minimum",
    "params": {
      "comparison": ">=",
      "limit": 1
    },
    "message": "should be >= 1"
  },
  {
    "keyword": "minimum",
    "dataPath": "/1/vehicle/length",
    "schemaPath": "vehicle.json/properties/length/minimum",
    "params": {
      "comparison": ">=",
      "limit": 0
    },
    "message": "should be >= 0"
  }
]
